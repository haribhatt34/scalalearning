package com.rockthejvm.part2oop

// Anonymous class 
// useful when we only need to use a class once
// in that case instead of creating a class and then creating its object
// we can directly create its object using anonymous class

// Anonymous classes are available for : abstract class, trait and non-abstract classes
object _10AnonymousClasses {

    abstract class Animal {
        def eat(): Unit
    }

    class SomeAnimal extends Animal {
        override def eat(): Unit = println("I'm a weird animal")
    }

    val someAnimal = new SomeAnimal
    
    // Anonymous class using abstract class
    val someAnimal_v2 = new Animal:
        override def eat(): Unit = println("I'm a weird animal")

    // For above code, below code is generated by compiler
    //   class _10AnonymousClasses.AnonClass$1 extends Animal {
    //       override def eat(): Unit = println("I'm a weird animal")
    //   }
    //   val someAnimal_v2 = _10AnonymousClasses.AnonClass$1 
    
    class Person(name: String) {
        def sayHi(): Unit = println(s"Hi, my name is $name")
    }
    
    // anonymous class using a non-abstract class
    val jim = new Person("Jim") {
        override def sayHi(): Unit = println("MY NAME IS JIM!")
    }

    def main(args: Array[String]): Unit = {
        println(jim.sayHi())
    }
}
